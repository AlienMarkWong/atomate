#!/usr/bin/env python
# coding: utf-8
# Copyright (c) Pymatgen Development Team.
# Distributed under the terms of the MIT License.

from __future__ import division, unicode_literals, print_function

import argparse

from monty.serialization import loadfn
import yaml

from matmethods import get_wf_from_spec_dict
from pymatgen import Structure


default_yaml = """fireworks:
- fw: matmethods.vasp.fws.OptimizeFW
- fw: matmethods.vasp.fws.StaticFW
  params:
    parents: 0
- fw: matmethods.vasp.fws.NonSCFUniformFW
  params:
    parents: 1
- fw: matmethods.vasp.fws.NonSCFLineFW
  params:
    parents: 1
common_params:
  db_file: None
"""

def add_wf(args):
    if args.spec_file:
        d = loadfn(args.spec_file)
    else:
        d = yaml.load(default_yaml)
    for f in args.files:
        s = Structure.from_file(f)
        print(get_wf_from_spec_dict(s, d))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="""
    mmwf is a convenient script to add workflows using a simple YAML spec.""",
                                     epilog="""Author: Shyue Ping Ong""")

    subparsers = parser.add_subparsers()

    padd = subparsers.add_parser("add", help="Add workflows.")
    padd.add_argument("-s", "--spec",
                      dest="spec_file", type=str, help="YAML/JSON spec file. If none is specified, a default MP-style workflow of relax + static + uniform + line is used.")
    padd.add_argument("files", metavar="files", type=str, nargs="+",
                      help="Structures to add workflows for.")
    padd.set_defaults(func=add_wf)

    args = parser.parse_args()

    try:
        a = getattr(args, "func")
    except AttributeError:
        parser.print_help()
        sys.exit(0)
    args.func(args)

