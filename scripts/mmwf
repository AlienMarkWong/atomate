#!/usr/bin/env python
# coding: utf-8
# Copyright (c) MatMethods Development Team.

from __future__ import division, unicode_literals, print_function

import argparse
import os

import sys
from monty.serialization import loadfn
import yaml
from datetime import datetime

from fireworks import LaunchPad
from fireworks.features.fw_report import FWReport
from fireworks.features.introspect import Introspector
from matmethods import get_wf_from_spec_dict
from matmethods.vasp.powerups import add_namefile, add_tags
from matmethods.vasp.workflows.presets import core
from pymatgen import Structure, MPRester


default_yaml = """fireworks:
- fw: matmethods.vasp.fireworks.core.OptimizeFW
- fw: matmethods.vasp.fireworks.core.StaticFW
  params:
    parents: 0
- fw: matmethods.vasp.fireworks.core.NonSCFFW
  params:
    parents: 1
    mode: uniform
- fw: matmethods.vasp.fireworks.core.NonSCFFW
  params:
    parents: 1
    mode: line
common_params:
  db_file: None
"""

module_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)))
lpad = LaunchPad.auto_load()

def add_to_lpad(workflow, write_namefile=False):
    """
    Add the workflow to the launchpad

    Args:
        workflow (Workflow): workflow for db insertion
        write_namefile (bool): If set an empty file with the name
            "FW--<fw.name>" will be written to the launch directory
    """
    workflow = add_namefile(workflow) if write_namefile else workflow
    lpad.add_wf(workflow)


def _get_wf(args, structure):
    if args.spec_file:
        spec_path = args.spec_file
        if args.library:
            if args.library.lower() == "vasp":
                spec_path = os.path.join(module_dir, "..", "matmethods",
                                         "vasp", "workflows", "base",
                                         "library", spec_path)
            else:
                raise ValueError("Unknown library: {}".format(args.library))
        d = loadfn(spec_path)
        return get_wf_from_spec_dict(structure, d)

    elif args.preset:
        if args.library:
            if args.library.lower() == "vasp":
                modname = "matmethods.vasp.workflows.presets.core"
                funcname = args.preset
            else:
                modname, funcname = args.preset.rsplit(".", 1)

        mod = __import__(modname, globals(), locals(), [str(funcname)], 0)
        func = getattr(mod, funcname)
        return func(structure)

    else:
        d = yaml.load(default_yaml)
        return get_wf_from_spec_dict(structure, d)


def add_wf(args):
    for f in args.files:
        if not args.mp:
            s = Structure.from_file(f)
        else:
            s = MPRester().get_structure_by_material_id(f)
        wf = _get_wf(args, s)
        add_to_lpad(wf, write_namefile=False)

def submit_test_suite(args):
    """
    Creates a test suite of workflows and adds it to the LaunchPad
    """
    mpr = MPRester()
    dt = datetime.utcnow()
    if args.reset:
        lpad.reset(password='', require_password=False)
    compounds = ["mp-149", "mp-715262", "mp-573697"] #Si, MgO, CsCl
    custom_compounds = {"wf_elastic_constant":"mp-117",# Sn
                        "wf_piezoelectric_constant":"mp-938"} # GeTe
    structures = [mpr.get_structure_by_material_id(c) for c in compounds]
    # Default
    d = yaml.load(default_yaml)
    wfs = [get_wf_from_spec_dict(s, d) for s in structures]
    # Presets
    for name, wf_func in core.__dict__.iteritems():
        if callable(wf_func) and name[:2]=="wf":
            if name in custom_compounds:
                custom_structure = mpr.get_structure_by_material_id(custom_compounds[name])
                wfs.append(wf_func(custom_structure))
            else:
                wfs.append(wf_func(structures[0]))
    wfs = [add_tags(wf, "test set {}".format(dt)) for wf in wfs]
    for wf in wfs:
        add_to_lpad(wf, write_namefile=False)

def verify_test_suite(args):
    fwr = FWReport(lpad)
    isp = Introspector(lpad)
    tags = lpad.fireworks.distinct("spec.tags", {"spec.tags":{"$regex":"test set"}})
    for tag in tags:
        dt = ''.join(tag.split()[2:])
        print("Test set submitted at {}".format(dt))
        report = fwr.get_stats(coll="workflows", interval="years", 
                num_intervals=1, additional_query={"metadata.tags":tag})
        if args.report:
            report_str = fwr.get_stats_str(report)
            print("LaunchPad report:")
            print(report_str)
        if args.introspect:
            print("Introspection:")
            isp.introspect_fizzled()
            table = isp.introspect_fizzled(coll='fireworks')
            isp.print_report(table, 'fireworks')
        states = report[-1]['states']
        count = report[-1]['count']
        if states['COMPLETED']==count:
            print("All test workflows successfully completed")
        elif states["FIZZLED"]==0:
            print("No fizzled workflows, but testing is not yet complete.")
        else:
            print("Workflows have fizzled.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="mmwf is a convenient script to add workflows using a "
                    "simple YAML spec.",
        epilog="Author: Shyue Ping Ong")

    subparsers = parser.add_subparsers()

    padd = subparsers.add_parser("add", help="Add workflows.")
    padd.add_argument("-l", "--library", dest="library", type=str,
                      help="If this option is set, the path to the spec file"
                           "is taken with respect to the MatMethods base library."
                           "Use 'vasp' for the VASP library of workflows")
    padd.add_argument("-s", "--spec",
                      dest="spec_file", type=str,
                      help="Specify workflow type using YAML/JSON spec file.")
    padd.add_argument("-p", "--preset",
                      dest="preset", type=str,
                      help="Specify workflow type using preset function")
    padd.add_argument("-m", "--mp", dest="mp", action='store_true',
                      help="If this option is set, the files argument is "
                           "interpreted as a list of Materials Project IDS. "
                           "Note that your MAPI_KEY environment variable must "
                           "be set to get structures from the Materials "
                           "Project.")
    padd.add_argument("files", metavar="files", type=str, nargs="+",
                      help="Structures to add workflows for.")
    padd.set_defaults(func=add_wf)

    ptest = subparsers.add_parser("test", help="Add test suite.")
    ptest.add_argument("-r", "--reset", dest="reset", action='store_true',
                       help="If this option is set, launchpad will be reset.")
    ptest.set_defaults(func=submit_test_suite)

    pverify = subparsers.add_parser("verify", help="verify test results.")
    
    pverify.add_argument("-r", "--report", dest="report", action="store_true",
                         help="Use this option to print FireWorks report "
                              "on test workflows.")
    pverify.add_argument("-i", "--introspect", dest="introspect", action="store_true",
                         help="Use this option to use FireWorks introspection "
                              "on test workflows.")
    pverify.set_defaults(func=verify_test_suite)

    args = parser.parse_args()

    try:
        a = getattr(args, "func")
    except AttributeError:
        parser.print_help()
        sys.exit(0)
    args.func(args)

